{
  "$source": "https://github.com/Qiksar/schema/blob/main/qikblox.json",
  "$schema": "https://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/Qiksar/schema/main/qikblox.json",
  "title": "qikblox",
  "description": "Schema definition for QikBlox data models",
  "type": "object",
  "definitions": {
    "field": {
      "type": "object",
      "description": "fully defined data field",
      "properties": {
        "Name": {
          "description": "unique fieldname",
          "type": "string"
        },
        "Help": {
          "description": "Documentation to help users understand the purpose of the field",
          "type": "string"
        },
        "Caption": {
          "description": "label to use in the UI",
          "type": "string"
        },
        "Table": {
          "description": "name of a table from which flattened fields can be sourced",
          "type": "string"
        },
        "Join": {
          "description": "name of a many to many join",
          "type": "string"
        },
        "Flatten": {
          "description": "specifies fields to import from the specified table",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DataType": {
          "description": "field type",
          "enum": ["uuid", "boolean", "string", "integer", "number", "timestamp", "json", "object", "array"]
        },
        "Options": {
          "description": "optional field behaviours",
          "type": "array",
          "items": {
            "enum": [
              "hidden",
              "ongrid",
              "ontree",
              "unique",
              "required",
              "readonly",
              "sort",
              "compact",
              "alignRight",
              "full-text-search",
              "writeonce",
              "lowercase",
              "uppercase",
              "titlecase"
            ]
          }
        },
        "Filter": {
          "description": "type of filter which the field can supply",
          "enum": [
            "filter-list-single",
            "filter-list-multi",
            "filter-uuid",
            "filter-string",
            "filter-boolean",
            "filter-number",
            "filter-date"
          ]
        },
        "Generator": {
          "description": "data generator to use, and must be wrapped in [ ], e.g. [name]",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": ["Name", "Help"]
    },
    "DataFields": {
      "description": "a list fields, which can include pre-defined template fields",
      "type": "array",
      "items": {
        "$ref": "#/definitions/field"
      }
    }
  },
  "properties": {
    "_id": {
      "description": "unique database ID for the model",
      "type": "string"
    },
    "Help": {
      "Description": "documentation for the model",
      "Type": "string"
    },
    "Namespace": {
      "description": "unique name for the model",
      "type": "string"
    },
    "SchemaName": {
      "description": "short name for the model",
      "type": "string"
    },
    "KeyFieldName": {
      "description": "column ID for the primary key applied to all tables",
      "type": "string"
    },
    "NameFields": {
      "description": "list of column names that can provide tags, keynames and other unique label values",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ParentIdColumn": {
      "description": "name of the column that relates an entity to its parent, which exists in the same table",
      "type": "string"
    },
    "ParentColumn": {
      "description": "name of the GraphQL object column which represents the parent entity",
      "type": "string"
    },
    "ChildrenColumn": {
      "description": "name of the GraphQL array which represents the array of child entities",
      "type": "string"
    },
    "TreeLabelColumn": {
      "description": "name of the column which provides the label for a tree node",
      "type": "string"
    },
    "TreeIconColumn": {
      "description": "name of the column which provides the icon for a tree node",
      "type": "string"
    },
    "SelectorQuery": {
      "description": "describes how to transform an entity into a format for dropdown selection",
      "properties": {
        "Columns": {
          "description": "columns to extract from source entities",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Orderby": {
          "description": "column to sort by",
          "type": "string"
        },
        "Help": {
          "description": "description of where the selectr might be used",
          "type": "string"
        }
      },
      "required": ["Columns", "Orderby", "Help"]
    },
    "Joins": {
      "description": "Many to many joins",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "name of the join",
            "type": "string"
          },
          "Table1": {
            "description": "first table in the join",
            "type": "string"
          },
          "Table2": {
            "description": "second table in the join",
            "type": "string"
          }
        },
        "required": ["Name", "Table1", "Table2"]
      }
    },
    "TemplateFields": {
      "description": "fields available to be inherited by any repository",
      "type": "array",
      "items": {
        "$ref": "#/definitions/field"
      }
    },
    "BaseFields": {
      "description": "fields inherited by all repositories, which can include named template fields",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "RepositoryDefinitions": {
      "description": "specify the repositories in the datamodel",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "unique repository name",
            "type": "string"
          },
          "Help": {
            "description": "documentation on repository purpose",
            "type": "string"
          },
          "Caption": {
            "description": "text to display in user interface",
            "type": "string"
          },
          "Path": {
            "description": "API path if applicable",
            "type": "string"
          },
          "Icon": {
            "description": "icon to display in user interface",
            "type": "string"
          },
          "Inherit": {
            "description": "a string containing the name of another repository to inherit details from",
            "type": "string"
          },
          "TableEntity": {
            "type": "object",
            "properties": {
              "Entity": {
                "type": "string"
              },
              "Table": {
                "type": "string"
              }
            }
          },
          "Treeview": {
            "description": "Indicates if data can be displayed hierarchically",
            "type": "boolean"
          },
          "TemplateFields": {
            "description": "fields to import from the list of TemplateFields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DataFields": {
            "$ref": "#/definitions/DataFields"
          },
          "FieldOrder": {
            "description": "order in which to display fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IconMap": {
            "description": "specify the icon (value) to use for each label value",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Label": {
                  "description": "unique key used as a lookup to get the icon to use",
                  "type": "string"
                },
                "Value": {
                  "description": "the name of the icon",
                  "type": "string"
                }
              },
              "required": ["Label", "Value"]
            }
          },
          "IconField": {
            "description": "name of the field which informs the name of the preferred icon",
            "type": "string"
          },
          "Abstract": {
            "description": "indicates a base type used by other components",
            "type": "boolean",
            "default": false
          },
          "NoRoute": {
            "description": "exclude the repository from automatic route generation",
            "type": "boolean",
            "default": false
          },
          "CollapseFields": {
            "description": "fields to import from a deeply nested graph object",
            "type": "object",
            "properties": {
              "SourceField": {
                "description": "path to graph object from which to source data",
                "type": "string"
              },
              "KeyPath": {
                "description": "path from which to extract the key",
                "type": "string"
              },
              "ValuePath": {
                "description": "path from which to extract the value",
                "type": "string"
              }
            },
            "required": ["SourceField", "KeyPath", "ValuePath"]
          }
        },
        "required": ["Name"],
        "additionalProperties": false
      }
    },
    "Sources": {
      "description": "data sources available from within this graph",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "unique name",
            "type": "string"
          },
          "Type": {
            "enum": ["single", "multiple"]
          },
          "From": {
            "description": "path to source object",
            "type": "string"
          },
          "Key": {
            "description": "name of the key attribute in the source object",
            "type": "string"
          },
          "Columns": {
            "description": "list of columns to extract from the source object",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["Name", "From", "Key", "Columns"]
      }
    },
    "Generators": {
      "description": "data generators",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Values": {
                "description": "object data structure which is interpreted by the data generator",
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          {
            "description": "key value pair of data generator values which can be randomly selected",
            "type": "object",
            "properties": {
              "Name": {
                "description": "unique name",
                "type": "string"
              },
              "Values": {
                "description": "semicolon separated values",
                "type": "string"
              }
            },
            "required": ["Name", "Values"]
          }
        ]
      }
    },
    "Triggers": {
      "description": "object graph builders triggered when a specified entity is created",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Entity": {
            "description": "name of the entity which will trigger the execution of the scripts",
            "type": "string"
          },
          "Scripts": {
            "description": "list of actions to execute sequentially",
            "type": "string"
          }
        },
        "required": ["Entity", "Scripts"]
      }
    }
  },
  "required": ["SchemaName", "Namespace"]
}
